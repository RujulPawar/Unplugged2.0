<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Waste Detection - NagarNetra</title>
    <link rel="stylesheet" href="/views/styles.css">
    <script src="/socket.io/socket.io.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .waste-container {
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin: 20px;
            height: calc(100vh - 140px);
            overflow-y: auto;
        }

        .main-content {
            height: 100vh;
            overflow-y: auto;
            padding: 20px;
        }

        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            height: calc(100% - 100px);
        }

        .camera-section {
            grid-column: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .data-section {
            grid-column: 2;
            display: flex;
            flex-direction: column;
            gap: 20px;
            height: 100%;
            overflow-y: auto;
        }

        .camera-feed {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            height: 100%;
        }

        #videoFeed {
            width: 100%;
            height: calc(100% - 60px);
            border-radius: 8px;
            background: #f0f0f0;
            object-fit: contain;
        }

        .graph-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            height: 45%;
        }

        .logs-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            height: 45%;
            overflow-y: auto;
        }

        .controls-wrapper {
        display: flex;
        align-items: center;
        gap: 15px;
        margin-bottom: 20px;
    }

    .detection-controls {
        display: flex;
        gap: 10px;
        margin-bottom: 0; /* Changed from 20px */
    }

        .control-btn {
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .start-btn {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .stop-btn {
            background: linear-gradient(135deg, #dc3545, #f44336);
            color: white;
        }

        .heatmap-btn {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #007bff, #0056b3);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-top: 20px;
        }

        .status {
        margin: 0; /* Changed from margin: 20px 0 */
        padding: 8px 15px;
        border-radius: 8px;
        font-weight: 500;
        text-align: center;
        flex-grow: 1;
        max-width: 200px;
    }

        .status.active {
            background: linear-gradient(135deg, #d4edda, #c3e6cb);
            color: #155724;
        }

        .status.inactive {
            background: linear-gradient(135deg, #f8d7da, #f5c6cb);
            color: #721c24;
        }

        .logs-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
        }

        .logs-table th, 
        .logs-table td {
            padding: 12px;
            text-align: left;
            border: 1px solid #dee2e6;
        }

        .logs-table th {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            position: sticky;
            top: 0;
            font-weight: 600;
        }

        .logs-table tr:nth-child(even) {
            background-color: #f8f9fa;
        }

        .logs-table tr:hover {
            background-color: #f2f2f2;
        }

        h1, h2 {
            color: #2c3e50;
            margin-bottom: 20px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.2);
            width: 80%;
            max-width: 1000px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            transition: color 0.3s ease;
        }

        .close:hover {
            color: #2c3e50;
        }

        #debug {
            padding: 10px;
            background: #f8f9fa;
            border-radius: 8px;
            margin-top: 10px;
            font-family: monospace;
            font-size: 12px;
            color: #666;
        }

        #heatmapCanvas {
        width: 100%;
        height: 400px;
        border-radius: 8px;
        background: #f8f9fa;
    }

    .heatmap-legend {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 15px;
        gap: 10px;
    }

    .legend-gradient {
        height: 20px;
        width: 200px;
        background: linear-gradient(to right, 
            rgba(0, 0, 255, 0.1),
            rgba(0, 0, 255, 0.5),
            rgba(255, 0, 0, 0.8)
        );
        border-radius: 4px;
    }

    .legend-label {
        font-size: 12px;
        color: #666;
    }
    </style>
</head>
<body>
    <div class="sidebar">
        <div class="sidebar-logo">
            <img src="/logo.png" alt="NagarNetra Logo">
            <h1>NagarNetra</h1>
        </div>
        <ul class="sidebar-menu">
            <li><a href="/nagarnetra"><img src="/home.png" alt="Home Icon" class="menu-icon"><span>Home</span></a></li>
            <li><a href="#"><img src="/traffic.png" alt="Traffic Icon" class="menu-icon"><span>Urban Traffic Management</span></a></li>
            <li><a href="/environmental-monitoring"><img src="/environment.png" alt="Environment Icon" class="menu-icon"><span>Environmental Monitoring</span></a></li>
            <li><a href="#"><img src="/safety.png" alt="Safety Icon" class="menu-icon"><span>Public Safety</span></a></li>
            <li><a href="/maintenance"><img src="/maintenance.png" alt="Maintenance Icon" class="menu-icon"><span>System Maintenance</span></a></li>
        </ul>
    </div>

    <div class="main-content">
        <h1>AI-Based Waste Detection</h1>
        
        <div class="waste-container">
            <div class="controls-wrapper">
                <div class="detection-controls">
                    <button class="control-btn start-btn" id="startBtn">Start Detection</button>
                    <button class="control-btn stop-btn" id="stopBtn">Stop Detection</button>
                    <button class="control-btn" onclick="testCameraFeed()">Test Camera</button>
                </div>
                <div id="status" class="status inactive">Detection Status: Stopped</div>
            </div>

            <div class="dashboard-grid">
                <div class="camera-section">
                    <div class="camera-feed">
                        <canvas id="videoFeed"></canvas>
                        <button class="heatmap-btn" id="heatmapBtn">Show Heatmap</button>
                    </div>
                </div>
                
                <div class="data-section">
                    <div class="graph-section">
                        <h2>Detection Trends</h2>
                        <canvas id="trendGraph"></canvas>
                    </div>
                    
                    <div class="logs-section">
                        <h2>Detection Logs</h2>
                        <div class="logs-container">
                            <table class="logs-table" id="logsTable">
                                <thead>
                                    <tr>
                                        <th>Time</th>
                                        <th>Object</th>
                                        <th>Confidence</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <!-- Logs will be added here dynamically -->
                                </tbody>
                            </table>
                            <button class="control-btn" id="exportLogsBtn" style="margin-top: 15px;">Export Logs</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- The Modal -->
    <div id="heatmapModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Heatmap of Detected Wastes</h2>
            <canvas id="heatmapCanvas"></canvas>
            <div class="heatmap-legend">
                <span class="legend-label">Low</span>
                <div class="legend-gradient"></div>
                <span class="legend-label">High</span>
            </div>
        </div>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/heatmap.js/2.0.2/heatmap.min.js"></script>

    <script>
        // Previous JavaScript code remains the same
        const socket = io();
        const canvas = document.getElementById('videoFeed');
        const ctx = canvas.getContext('2d');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const statusDiv = document.getElementById('status');
        const debugDiv = document.getElementById('debug');
        const heatmapBtn = document.getElementById('heatmapBtn');
        const heatmapModal = document.getElementById('heatmapModal');
        const closeModal = document.getElementsByClassName('close')[0];
        const trendGraph = document.getElementById('trendGraph').getContext('2d');
        const exportLogsBtn = document.getElementById('exportLogsBtn');

        // Set canvas size
        canvas.width = 640; // Increased size
        canvas.height = 480; // Increased size

        const heatmapInstance = h337.create({
        container: document.getElementById('heatmapCanvas'),
        radius: 30,
        maxOpacity: 0.8,
        minOpacity: 0.1,
        blur: 0.75,
        gradient: {
            '.1': 'blue',
            '.5': 'blue',
            '.8': 'red',
            '.95': 'red'
        }
    });

    // Store detection points for heatmap
    let detectionPoints = [];

        function debug(message) {
            debugDiv.textContent = JSON.stringify(message, null, 2);
        }

        function drawDetections(detections) {
            detections.forEach(detection => {
                const x = detection.x;
                const y = detection.y;
                const width = detection.width;
                const height = detection.height;

                ctx.strokeStyle = '#00ff00';
                ctx.lineWidth = 2;
                ctx.strokeRect(
                    x - width / 2,
                    y - height / 2,
                    width,
                    height
                );

                ctx.fillStyle = '#00ff00';
                ctx.font = '16px Arial';
                const label = `${detection.class} ${(detection.confidence * 100).toFixed(1)}%`;
                ctx.fillText(
                    label,
                    x - width / 2,
                    y - height / 2 - 5
                );
            });
        }

        socket.on('frame', (data) => {
    try {
        console.log('Received frame, image length:', data.image.length);
        console.log('Detections:', data.detections ? data.detections.length : 0);
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        const img = new Image();
        
        // Add a timeout for image loading
        const timeoutId = setTimeout(() => {
            console.log('Image loading timeout');
            ctx.fillStyle = 'orange';
            ctx.font = '20px Arial';
            ctx.fillText('Camera feed timeout - check ESP32 connection', 50, canvas.height/2);
        }, 5000);
        
        // Error handling for image loading
        img.onerror = (err) => {
            clearTimeout(timeoutId);
            console.error('Error loading image:', err);
            ctx.fillStyle = 'red';
            ctx.font = '16px Arial';
            ctx.fillText('Error loading image', 10, 50);
        };
        
        // Success handler for image loading
        img.onload = () => {
            clearTimeout(timeoutId);
            console.log('Image loaded successfully, drawing to canvas');
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            
            if (data.detections && data.detections.length > 0) {
                drawDetections(data.detections);
                updateLogsTable(data.detections);
                
                // Store detection points for heatmap
                data.detections.forEach(detection => {
                    detectionPoints.push({
                        x: detection.x,
                        y: detection.y,
                        value: detection.confidence * 100
                    });
                });

                // Keep only last 100 points
                if (detectionPoints.length > 100) {
                    detectionPoints = detectionPoints.slice(-100);
                }
            }
        };
        
        // Set image source after defining handlers
        img.src = 'data:image/jpeg;base64,' + data.image;
    } catch (err) {
        console.error('Error processing frame:', err);
    }
});
        function updateLogsTable(detections) {
            const tbody = document.querySelector('#logsTable tbody');
            const now = new Date().toLocaleTimeString();

            detections.forEach(detection => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${now}</td>
                    <td>${detection.class}</td>
                    <td>${(detection.confidence * 100).toFixed(1)}%</td>
                `;
                tbody.insertBefore(row, tbody.firstChild);

                if (tbody.children.length > 10) {
                    tbody.removeChild(tbody.lastChild);
                }
            });
        }

        startBtn.onclick = () => {
            socket.emit('startDetection');
            statusDiv.textContent = 'Detection Status: Running';
            statusDiv.className = 'status active';
        };

        stopBtn.onclick = () => {
        socket.emit('stopDetection');
        statusDiv.textContent = 'Detection Status: Stopped';
        statusDiv.className = 'status inactive';
        detectionPoints = []; // Clear stored points
        heatmapInstance.setData({ data: [] }); // Clear heatmap
    };

        heatmapBtn.onclick = () => {
        heatmapModal.style.display = "block";
        
        const heatmapCanvas = document.getElementById('heatmapCanvas');
        const width = heatmapCanvas.clientWidth;
        const height = heatmapCanvas.clientHeight;
        
        // Scale points to heatmap canvas size
        const scaledPoints = detectionPoints.map(point => ({
            x: Math.floor((point.x / canvas.width) * width),
            y: Math.floor((point.y / canvas.height) * height),
            value: point.value
        }));

        // Update heatmap data
        heatmapInstance.setData({
            max: 100,
            min: 0,
            data: scaledPoints
        });
    };


        closeModal.onclick = () => {
            heatmapModal.style.display = "none";
        };

        window.onclick = (event) => {
            if (event.target == heatmapModal) {
                heatmapModal.style.display = "none";
            }
        };



socket.on('connect', () => {
    console.log('Socket.IO Connected!', socket.id);
    document.getElementById('status').textContent = 'Detection Status: Connected';
});

socket.on('disconnect', (reason) => {
    console.log('Socket.IO Disconnected:', reason);
    document.getElementById('status').textContent = 'Detection Status: Disconnected';
});

socket.on('connect_error', (error) => {
    console.log('Socket.IO Connection Error:', error);
    document.getElementById('status').textContent = 'Detection Status: Error';
});


        function testCameraFeed() {
    fetch('/test-camera')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Camera test successful!');
            } else {
                alert('Camera test failed: ' + data.error);
            }
        })
        .catch(error => {
            alert('Camera test error: ' + error);
        });
}

        const trendChart = new Chart(trendGraph, {
            type: 'line',
            data: {
                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
                datasets: [{
                    label: 'Waste Detection Trends',
                    data: [65, 59, 80, 81, 56, 55, 40],
                    fill: false,
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Month'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Detections'
                        },
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    title: {
                        display: true,
                        text: 'Monthly Waste Detection Statistics'
                    }
                }
            }
        });

        // Handle window resize to maintain canvas aspect ratio
        window.addEventListener('resize', () => {
            const container = canvas.parentElement;
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
        });

        // Export logs functionality
        exportLogsBtn.onclick = () => {
            const logs = [];
            document.querySelectorAll('#logsTable tbody tr').forEach(row => {
                const cells = row.querySelectorAll('td');
                logs.push({
                    time: cells[0].textContent,
                    object: cells[1].textContent,
                    confidence: cells[2].textContent
                });
            });

            const blob = new Blob([JSON.stringify(logs, null, 2)], { type: 'application/json' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `detection_logs_${new Date().toISOString().split('T')[0]}.json`;
            a.click();
            URL.revokeObjectURL(url);
        };

        // Initialize the page
        function init() {
            // Set initial canvas size
            const container = canvas.parentElement;
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
            
            // Disable stop button initially
            stopBtn.disabled = true;
            
            // Set up event listeners for buttons
            startBtn.addEventListener('click', () => {
                stopBtn.disabled = false;
                startBtn.disabled = true;
            });
            
            stopBtn.addEventListener('click', () => {
                startBtn.disabled = false;
                stopBtn.disabled = true;
            });
        }

        // Call init when the page loads
        document.addEventListener('DOMContentLoaded', init);

        // Handle errors gracefully
        window.addEventListener('error', (error) => {
            console.error('Application error:', error);
            debug({
                error: 'An error occurred',
                message: error.message,
                timestamp: new Date().toISOString()
            });
        });
    </script>
</body>
</html>